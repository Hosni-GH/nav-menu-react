{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js"],"names":["MenuItem","className","this","props","isActive","classes","href","link","text","children","Component","SubMenu","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAEMA,E,iLAGE,OACI,wBAAIC,UAAmC,SAAxBC,KAAKC,MAAMC,SAAuBF,KAAKC,MAAME,QAAQ,aAAeH,KAAKC,MAAME,SAAU,uBAAGC,KAAMJ,KAAKC,MAAMI,MAAOL,KAAKC,MAAMK,MAAUN,KAAKC,MAAMM,c,GAJxJC,aAQjBC,E,iLAEE,OACI,yBAAKV,UAAU,YACX,wBAAIA,UAAU,iBACV,kBAAC,EAAD,CAAUI,QAAQ,qBAAqBG,KAAK,oBAAoBD,KAAK,MACrE,kBAAC,EAAD,CAAUF,QAAQ,qBAAqBG,KAAK,eAAeD,KAAK,MAChE,kBAAC,EAAD,CAAUF,QAAQ,qBAAqBG,KAAK,gBAAgBD,KAAK,Y,GAP/DG,aA6BPE,E,iLAbP,OACI,gCACI,wBAAIX,UAAU,aACV,kBAAC,EAAD,CAAUI,QAAQ,uBAAuBG,KAAK,OAAOD,KAAK,IAAIH,SAAS,SACvE,kBAAC,EAAD,CAAUC,QAAQ,uBAAuBG,KAAK,WAAWD,KAAK,IAAIH,SAAS,SACvE,kBAAC,EAAD,OAEJ,kBAAC,EAAD,CAAUC,QAAQ,uBAAuBG,KAAK,UAAUD,KAAK,IAAIH,SAAS,gB,GATzEM,a,MCZNG,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCKca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d8a8238e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass MenuItem extends Component {  \r\n     \r\n    render() { \r\n        return (\r\n            <li className={this.props.isActive === \"true\" ? (this.props.classes+\" is-active\"):(this.props.classes)}><a href={this.props.link}>{this.props.text}</a>{this.props.children}</li>\r\n        );\r\n    }\r\n}\r\nclass SubMenu extends Component {\r\n    render() { \r\n        return (  \r\n            <div className=\"sub-menu\">\r\n                <ul className=\"dropdown-menu\">\r\n                    <MenuItem classes=\"sub-item sub-item1\" text=\"For entrepreneurs\" link=\"#\"/>\r\n                    <MenuItem classes=\"sub-item sub-item2\" text=\"For students\" link=\"#\"/>\r\n                    <MenuItem classes=\"sub-item sub-item3\" text=\"For hobbyists\" link=\"#\"/>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nclass Header extends Component {\r\n    render() { \r\n        return ( \r\n            <header>\r\n                <ul className=\"main-menu\">\r\n                    <MenuItem classes=\"menu-item menu-item1\" text=\"Home\" link=\"#\" isActive=\"true\"/>\r\n                    <MenuItem classes=\"menu-item menu-item2\" text=\"Services\" link=\"#\" isActive=\"false\">\r\n                        <SubMenu/>\r\n                    </MenuItem>\r\n                    <MenuItem classes=\"menu-item menu-item3\" text=\"Contact\" link=\"#\" isActive=\"false\"/>\r\n                </ul>\r\n            </header> \r\n        );\r\n    }\r\n}\r\nexport default Header","import React from 'react';\nimport Header from './Header'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}